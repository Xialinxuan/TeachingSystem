@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Identity;

@inject IMatToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager

<EditForm Model="myModel" OnValidSubmit="search">
    <DataAnnotationsValidator/>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <MatTextField @bind-Value="myModel.CourseName" Label="课程名称"></MatTextField>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <MatTextField @bind-Value="myModel.CourseID" Label="课程代码"></MatTextField>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <MatTextField @bind-Value="myModel.TeacherName" Label="教师名称"></MatTextField>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <MatButton Type="submit" Raised="true">搜索课程</MatButton>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
            </div>
        </div>
</EditForm>
<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
            <MatAccordion Multi="true">
                @if(courses != null){
                    foreach(var course in courses){
                        <MatExpansionPanel style="margin-top: 1%;">
                        <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>(@course[0].showclass.Course.CourseId) @course[0].showclass.Course.Name —— @(course[0].showclass.Course.TheoryHours+course[0].showclass.Course.PracticeHours/2.0) 学分</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatTable Items="@course" class="mat-elevation-z5" ShowPaging="false">
                                <MatTableHeader>
                                    <th>教师</th>
                                    <th>上课时间</th>
                                    <th>上课地点</th>
                                    <th>余量/容量</th>
                                    <th>待定人数</th>
                                    <th>操作</th>
                                </MatTableHeader>
                                <MatTableRow>
                                    <td style="width: 20%;">@context.showclass.Teacher.Name</td>
                                    <td style="width: 25%;">
                                        @if (context.showclass.TeachTime != null) {
                                            @for(int i = 0; i < 7; i++) {
                                                int time = context.showclass.TeachTime[i];
                                                @for(int j = 12; j >= 0; j--) {
                                                    int index = j * 7 + i;
                                                    if ((time & 1) == 1) {
                                                        <div>@indexToTimeStr(@index)</div>
                                                    } 
                                                    time = time >> 1;
                                                }
                                            }
                                        }
                                    </td>
                                    <td style="width: 25%;">@context.showclass.Classroom.ClassroomName</td>
                                    <td style="width: 15%;">@context.showclass.Students.Count / @context.showclass.Classroom.Capacity</td>
                                    <td style="width: 15%;">0</td>
                                    <td>
                                        @if(@context.state == "选课"){
                                            <MatButton Raised="true" OnClick="@(e => OpenDialog(context))">补选</MatButton>
                                        } else if(@context.state == "退课"){
                                            <MatButton Raised="true" OnClick="@(e => OpenDialogDecline(context))">撤销</MatButton>
                                        }else{
                                            <MatButton Raised="false" >已选课程</MatButton>
                                        }
                                    </td>
                                </MatTableRow>
                            </MatTable>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    }
                }else {

                }
            </MatAccordion>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
    </div>
</div>
<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>补选申请填写</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="applyModel" OnValidSubmit="postApply">
            <DataAnnotationsValidator/>
            <p>
                <MatTextField Label="上课教师" @bind-Value="applyModel.TeacherName" FullWidth="true" ReadOnly="true"/>
            </p>
            <p>
                <MatTextField Label="课程名称" @bind-Value="applyModel.CourseName" FullWidth="true" ReadOnly="true"/>
            </p>
            <p>
                <MatTextField Label="课程编号" @bind-Value="applyModel.CourseId" FullWidth="true" ReadOnly="true"/>
            </p>
            <p>
                <MatTextField Label="申请理由" @bind-Value="applyModel.reason" TextArea="true" />
                <ValidationMessage For="@(() => applyModel.reason)"/>
            </p>
            <p>
                <MatButton Type="submit" Raised="true">提交</MatButton>
            </p>
        </EditForm>              
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">取消</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@declineIsOpen">
    <MatDialogTitle>确定撤销对 @applyModel.CourseName 的补选申请？</MatDialogTitle>
    <MatDialogActions>
        <MatButton OnClick="@declineApply">确认</MatButton>
        <MatButton OnClick="@(e => { declineIsOpen = false; })">取消</MatButton>
    </MatDialogActions>
</MatDialog>


@code 
{
    @* [Inject] IJSRuntime JS { get; set; } *@
    ApplyModel applyModel = new ApplyModel();
    List<Class> classes;
    List<List<shownclass>> courses = new List<List<shownclass>>();
    List<Class> details;
    SearchModel myModel = new SearchModel();
    bool dialogIsOpen = false;

    bool declineIsOpen = false;
    User user = null;
    shownclass applyObj;
    void OpenDialog(shownclass sc)
    {
        applyObj = sc;
        Class c = sc.showclass;
        applyModel.ApplyClass = c;
        applyModel.CourseId = c.Course.CourseId;
        applyModel.CourseName = c.Course.Name;
        applyModel.TeacherName = c.Teacher.Name;
        applyModel.reason = null;
        dialogIsOpen = true;
    }

    void OpenDialogDecline(shownclass sc)
    {
        applyObj = sc;
        Class c = sc.showclass;
        applyModel.ApplyClass = c;
        applyModel.CourseId = c.Course.CourseId;
        applyModel.CourseName = c.Course.Name;
        applyModel.TeacherName = c.Teacher.Name;
        applyModel.reason = null;
        declineIsOpen = true;
    }
    async Task postApply()
    {
        if(TSSDbContext.MyGlobals.Systemstate != 2){
            Toaster.Add("现在不是补选时间！",  MatToastType.Danger);
        }else{
            Apply apply = new Apply();
            apply.Reason = applyModel.reason;
            apply.Student = user;
            apply.Class = applyModel.ApplyClass;
            await DbContext.Applies.AddAsync(apply);
            await DbContext.SaveChangesAsync();

            applyObj.state="退课";
            dialogIsOpen = false;
            Toaster.Add("补选申请提交成功！", MatToastType.Success);
        }
        
    }

    async Task declineApply()
    {
        if(TSSDbContext.MyGlobals.Systemstate != 2){
            Toaster.Add("现在不是补选时间！",  MatToastType.Danger);
        }else{
        List<Apply> apply = new List<Apply>();
        var all = from m in DbContext.Applies.Include("Class").Include("Student")
            select m;
        all = all.Where(s=>s.Class.ClassId.Equals(applyModel.ApplyClass.ClassId));
        all = all.Where(s=>s.Student.Id.Equals(user.Id));
        apply = all.ToList();
        foreach(var a in apply){
            DbContext.Applies.Remove(a);
            await DbContext.SaveChangesAsync();
        }
        applyObj.state="选课";
        declineIsOpen = false;
        Toaster.Add("撤销补选申请成功！", MatToastType.Success);
        }
    }

    Boolean hasApply(Class c)
    {
        List<Apply> apply = new List<Apply>();
        var all = DbContext.Applies.Include("Class").Include("Student");
        apply = all.Where(s=>s.Class.ClassId == c.ClassId).Where(s=>s.Student.Id == user.Id).ToList();
        if(apply.Count>0)
            return true;
        return false;
    }

    public class SearchModel
    {
        public string CourseName { get; set; }
        public string CourseID { get; set; }
        public string TeacherName { get; set; }
    }

    public class ApplyModel
    {
        public Class ApplyClass { get; set; }
        public string CourseId { get; set; }
        public string CourseName { get; set; }
        public string TeacherName { get; set; }
        [Required(ErrorMessage = "请填写申请理由")]
        [StringLength(60, ErrorMessage = "申请理由过长")]
        public string reason { get; set; }
    }
    
    async Task search()
    {
        if (user == null) {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            user = await _userManager.GetUserAsync(authState.User);
        }
        courses.Clear();
        var selectclasses = from m in DbContext.Classes.Include("Classroom").Include("Course").Include("Teacher")
                select m;
        if (!string.IsNullOrEmpty(myModel.CourseName))
        {
            selectclasses = selectclasses.Where(s => s.Course.Name.Contains(myModel.CourseName));
        }
        if (!string.IsNullOrEmpty(myModel.CourseID))
        {
            selectclasses = selectclasses.Where(s => s.Course.CourseId.Contains(myModel.CourseID));
        }
        if (!string.IsNullOrEmpty(myModel.TeacherName))
        {
            selectclasses = selectclasses.Where(s => s.Teacher.Name.Contains(myModel.TeacherName));
        }
        //

        classes = selectclasses.ToList(); 
        IEnumerable<IGrouping<string, Class>> query = classes.GroupBy(x => x.Course.CourseId);
        foreach (IGrouping<string, Class> info in query)
        {
            details = info.ToList<Class>();
            List<shownclass> showclasslist = new List<shownclass>();
            foreach(Class c in details)
            {
                if((c.Students!=null&&c.Students.Contains(user.Id)))
                    showclasslist.Add(new shownclass(c,"禁用"));
                else if(hasApply(c))
                    showclasslist.Add(new shownclass(c,"退课"));
                else
                    showclasslist.Add(new shownclass(c,"选课"));
            }
            courses.Add(showclasslist); 
        }
    }

    String indexToTimeStr(int index) {
        String timeStr = "";
        int day = index % 7;
        int tid = index / 7;
        
        switch(day) {
            case 0: timeStr += "周一 ";break;
            case 1: timeStr += "周二 ";break;
            case 2: timeStr += "周三 ";break;
            case 3: timeStr += "周四 ";break;
            case 4: timeStr += "周五 ";break;
            case 5: timeStr += "周六 ";break;
            case 6: timeStr += "周日 ";break;
        }
        switch(tid) {
            case 0: timeStr += "08:00-08:45"; break;
            case 1: timeStr += "08:50-09:35"; break;
            case 2: timeStr += "09:50-10:35"; break;
            case 3: timeStr += "10:40-11:25"; break;
            case 4: timeStr += "11:30-12:15"; break;
            case 5: timeStr += "13:15-14:00"; break;
            case 6: timeStr += "14:05-14:50"; break;
            case 7: timeStr += "14:55-15:40"; break;
            case 8: timeStr += "15:55-16:40"; break;
            case 9: timeStr += "16:45-17:30"; break;
            case 10: timeStr += "18:30-19:15"; break;
            case 11: timeStr += "19:20-20:05"; break;
            case 12: timeStr += "20:10-20:55"; break;
        }
        return timeStr;
    }

    public class shownclass
    {
        public Class showclass { get; set; }
        public string state { get; set; }
        public shownclass(Class c, string s)
        {
            this.showclass=c;
            this.state=s;
        }
    }

}