@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Identity;

@inject IMatToaster Toaster

<EditForm Model="myModel" OnValidSubmit="search">
    <DataAnnotationsValidator/>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <MatTextField @bind-Value="myModel.CourseName" Label="CourseName"></MatTextField>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <MatTextField @bind-Value="myModel.CourseID" Label="CourseID"></MatTextField>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <MatTextField @bind-Value="myModel.Department" Label="Department"></MatTextField>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <MatButton Type="submit" Raised="true">search</MatButton>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
            </div>
        </div>
</EditForm>
<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
            <MatAccordion Multi="true">
                @if(targetCourses != null){
                    foreach(var course in targetCourses){
                        <MatExpansionPanel style="margin-top: 1%;">
                        <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>@course.Name</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatTable Items="@cars" class="mat-elevation-z5" ShowPaging="false">
                                <MatTableHeader>
                                    <th>教师</th>
                                    <th>上课时间</th>
                                    <th>上课地点</th>
                                    <th>余量/容量</th>
                                    <th>待定人数</th>
                                    <th>操作</th>
                                </MatTableHeader>
                                <MatTableRow>
                                    <td style="width: 20%;">@context.Name</td>
                                    <td style="width: 25%;">@String.Format("${0:f2}", @context.Price)</td>
                                    <td style="width: 25%;">@context.Horsepower</td>
                                    <td style="width: 15%;">4/40</td>
                                    <td style="width: 15%;">5</td>
                                    <td><MatButton Raised="true" OnClick="@(e => OpenDialog(course))">补选</MatButton></td>
                                </MatTableRow>
                            </MatTable>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    }
                }
            </MatAccordion>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
    </div>
</div>
<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>补选申请填写</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="applyModel" OnValidSubmit="postApply">
            <DataAnnotationsValidator/>
            <p>
                <MatTextField Label="课号" @bind-Value="applyModel.CourseId" FullWidth="true" ReadOnly="true"/>
            </p>
            <p>
                <MatTextField Label="课程名称" @bind-Value="applyModel.Name" FullWidth="true" ReadOnly="true"/>
            </p>
            <p>
                <MatTextField Label="申请理由" @bind-Value="applyModel.reason" TextArea="true" />
                <ValidationMessage For="@(() => applyModel.reason)"/>
            </p>
            <p>
                <MatButton Type="submit" Raised="true">提交</MatButton>
            </p>
        </EditForm>              
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">取消</MatButton>
    </MatDialogActions>
</MatDialog>


@code 
{
    [Inject] IJSRuntime JS { get; set; }
    SearchModel myModel = new SearchModel();
    ApplyModel applyModel = new ApplyModel();
    IEnumerable<Course> targetCourses;
    bool dialogIsOpen = false;
    void OpenDialog(Course c)
    {
        applyModel.CourseId = c.CourseId;
        applyModel.Name = c.Name;
        applyModel.reason = null;
        dialogIsOpen = true;
    }

    @* async Task postApply() *@
    void postApply()
    {
        dialogIsOpen = false;
        Toaster.Add("补选申请提交成功！", MatToastType.Success);
    }

    async Task search()
    {
        var selectcourses = from m in DbContext.Courses
                    select m;
        if (!string.IsNullOrEmpty(myModel.CourseName))
        {
            selectcourses = selectcourses.Where(s => s.Name.Contains(myModel.CourseName));
        }
        if (!string.IsNullOrEmpty(myModel.CourseID))
        {
            selectcourses = selectcourses.Where(s => s.CourseId.Contains(myModel.CourseID));
        }
        if (!string.IsNullOrEmpty(myModel.Department))
        {
            selectcourses = selectcourses.Where(s => s.Department.Contains(myModel.Department));
        }
        targetCourses = await selectcourses.ToListAsync();
    }

    public class SearchModel
    {
        public string CourseName { get; set; }
        public string CourseID { get; set; }
        public string Department { get; set; }
    }

    public class ApplyModel
    {
        @* public Class ApplyClass; *@
        public string CourseId { get; set; }
        public string Name { get; set; }

        [Required(ErrorMessage = "请填写申请理由")]
        [StringLength(60, ErrorMessage = "申请理由过长")]
        public string reason { get; set; }
    }
    public class Car
    {
        public string Name { get; set; }
        public double Price { get; set; }
        public int Horsepower { get; set; }

        public Car(string name, double price, int horsepower)
        {
            Name = name;
            Price = price;
            Horsepower = horsepower;
        }
    }

    Car[] cars = new[]
    {
        new Car("Volkswagen Golf", 10000, 220),
        new Car("Volkswagen Passat", 11000, 240),
        new Car("Volkswagen Polo", 12000, 110),
        new Car("Ford Focus", 13000, 200),
        new Car("Ford Fiesta", 14000, 160),
        new Car("Ford Fusion", 15000, 260),
        new Car("Ford Mondeo", 16000, 120),
    };

}