@page "/CourseElective/ClassSelection"
@using Microsoft.AspNetCore.Mvc;
@attribute [Authorize(Roles = "Student")]
@implements IDisposable

@using TeachingSystem.Areas.CourseElective.Shared
<MatTabGroup>
    <MatTab Label="自主选课">
        <EditForm Model="myModel" OnValidSubmit="search">
            <DataAnnotationsValidator/>
                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myModel.CourseName" Label="CourseName"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myModel.CourseID" Label="CourseID"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myModel.Department" Label="Department"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            <MatButton Type="submit" Raised="true">search</MatButton>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                    </div>
                </div>
        </EditForm>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                    <MatAccordion Multi="true">
                        @if(courses != null){
                            foreach(var course in courses){
                                <MatExpansionPanel style="margin-top: 1%;">
                                <MatExpansionPanelSummary>
                                <MatExpansionPanelHeader>@course.Name</MatExpansionPanelHeader>
                                </MatExpansionPanelSummary>
                                <MatExpansionPanelDetails>
                                    <MatTable Items="@cars" class="mat-elevation-z5" ShowPaging="false">
                                        <MatTableHeader>
                                            <th>教师</th>
                                            <th>上课时间</th>
                                            <th>上课地点</th>
                                            <th>余量/容量</th>
                                            <th>待定人数</th>
                                            <th>操作</th>
                                        </MatTableHeader>
                                        <MatTableRow>
                                            <td style="width: 20%;">@context.Name</td>
                                            <td style="width: 25%;">@String.Format("${0:f2}", @context.Price)</td>
                                            <td style="width: 25%;">@context.Horsepower</td>
                                            <td style="width: 15%;">4/40</td>
                                            <td style="width: 15%;">5</td>
                                            <td><MatButton Raised="true">选课</MatButton></td>
                                        </MatTableRow>
                                    </MatTable>
                                </MatExpansionPanelDetails>
                            </MatExpansionPanel>
                            }
                        }else {

                        }
                    </MatAccordion>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
            </div>
        </div>
        
    </MatTab>
    <MatTab Label="查看课表">
        Second Content
    </MatTab>
    <MatTab Label="补选课程">
        <ClassApply/>
    </MatTab>

</MatTabGroup>

 
@code
{
    [Inject] IJSRuntime JS { get; set; }
    IEnumerable<Course> courses;
    SearchModel myModel = new SearchModel();
    public class Car
    {
        public string Name { get; set; }
        public double Price { get; set; }
        public int Horsepower { get; set; }

        public Car(string name, double price, int horsepower)
        {
            Name = name;
            Price = price;
            Horsepower = horsepower;
        }
    }

    Car[] cars = new[]
    {
        new Car("Volkswagen Golf", 10000, 220),
        new Car("Volkswagen Passat", 11000, 240),
        new Car("Volkswagen Polo", 12000, 110),
        new Car("Ford Focus", 13000, 200),
        new Car("Ford Fiesta", 14000, 160),
        new Car("Ford Fusion", 15000, 260),
        new Car("Ford Mondeo", 16000, 120),
    };

    protected override void OnInitialized()
    {
        TSSDbContext.MyGlobals.PresentConnection++;
        Console.WriteLine("OnInitialized");
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        await UpdateList();
    }
    async Task UpdateList()
    {
        var selectcourses = from m in DbContext.Courses
                    select m;
        if (!string.IsNullOrEmpty(myModel.CourseName))
        {
            selectcourses = selectcourses.Where(s => s.Name.Contains(myModel.CourseName));
        }
        if (!string.IsNullOrEmpty(myModel.CourseID))
        {
            selectcourses = selectcourses.Where(s => s.CourseId.Contains(myModel.CourseID));
        }
        if (!string.IsNullOrEmpty(myModel.Department))
        {
            selectcourses = selectcourses.Where(s => s.Department.Contains(myModel.Department));
        }
        courses = await selectcourses.ToListAsync();
    }
    async Task search()
    {
        var selectcourses = from m in DbContext.Courses
                    select m;
        if (!string.IsNullOrEmpty(myModel.CourseName))
        {
            selectcourses = selectcourses.Where(s => s.Name.Contains(myModel.CourseName));
        }
        if (!string.IsNullOrEmpty(myModel.CourseID))
        {
            selectcourses = selectcourses.Where(s => s.CourseId.Contains(myModel.CourseID));
        }
        if (!string.IsNullOrEmpty(myModel.Department))
        {
            selectcourses = selectcourses.Where(s => s.Department.Contains(myModel.Department));
        }
        courses = await selectcourses.ToListAsync();
    }

    public class SearchModel
    {
        public string CourseName { get; set; }
        public string CourseID { get; set; }
        public string Department { get; set; }
    }

    protected override bool ShouldRender()
    {
        var renderUI = true;
        if(TSSDbContext.MyGlobals.PresentConnection>=TSSDbContext.MyGlobals.MaxConnection){
            renderUI = false;
        }
        return renderUI;
    }

    public void Dispose()
    {
        TSSDbContext.MyGlobals.PresentConnection--;
        Console.WriteLine("Dispose");
    }
}