@page "/CourseElective/ClassSelection"
@using Microsoft.AspNetCore.Mvc;
@using System.Security.Claims
@implements IDisposable

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager

@using TeachingSystem.Areas.CourseElective.Shared
<MatTabGroup>
    <MatTab Label="自主选课">
        <EditForm Model="myModel" OnValidSubmit="search">
            <DataAnnotationsValidator/>
                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myModel.CourseName" Label="课程名称"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myModel.CourseID" Label="课程代码"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myModel.TeacherName" Label="教师名称"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            <MatButton Type="submit" Raised="true">搜索课程</MatButton>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                    </div>
                </div>
        </EditForm>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                    <MatAccordion Multi="true">
                        @if(courses != null){
                            foreach(var course in courses){
                                <MatExpansionPanel style="margin-top: 1%;">
                                <MatExpansionPanelSummary>
                                <MatExpansionPanelHeader>(@course[0].showclass.Course.CourseId) @course[0].showclass.Course.Name —— @(course[0].showclass.Course.TheoryHours+course[0].showclass.Course.PracticeHours/2.0) 学分</MatExpansionPanelHeader>
                                </MatExpansionPanelSummary>
                                <MatExpansionPanelDetails>
                                    <MatTable Items="@course" class="mat-elevation-z5" ShowPaging="false">
                                        <MatTableHeader>
                                            <th>教师</th>
                                            <th>上课时间</th>
                                            <th>上课地点</th>
                                            <th>余量/容量</th>
                                            <th>待定人数</th>
                                            <th>操作</th>
                                        </MatTableHeader>
                                        <MatTableRow>
                                            <td style="width: 20%;">@context.showclass.Teacher.Name</td>
                                            <td style="width: 25%;">
                                                @if (context.showclass.TeachTime != null) {
                                                    @for(int i = 0; i < 7; i++) {
                                                        int time = context.showclass.TeachTime[i];
                                                        @for(int j = 12; j >= 0; j--) {
                                                            int index = j * 7 + i;
                                                            if ((time & 1) == 1) {
                                                                <div>@indexToTimeStr(@index)</div>
                                                            } 
                                                            time = time >> 1;
                                                        }
                                                    }
                                                }
                                            </td>
                                            <td style="width: 25%;">@context.showclass.Classroom.ClassroomName</td>
                                            <td style="width: 15%;">@context.showclass.Students.Count / @context.showclass.Classroom.Capacity</td>
                                            <td style="width: 15%;">0</td>
                                            <td><MatButton Raised="true">@context.state</MatButton></td>
                                        </MatTableRow>
                                    </MatTable>
                                </MatExpansionPanelDetails>
                            </MatExpansionPanel>
                            }
                        }else {

                        }
                    </MatAccordion>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
            </div>
        </div>
        
    </MatTab>
    <MatTab Label="培养方案">
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                    <MatAccordion Multi="true">
                        <MatExpansionPanel style="margin-top: 1%;">
                        <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>必修课程&emsp;&emsp;已修学分 / 要求学分： @csTemplate.currentcredits[0] / @csTemplate.needcredits[0]</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatTable Items="@csTemplate.Courselists[0]" class="mat-elevation-z5">
                                <MatTableHeader>
                                    <th>课程代码</th>
                                    <th>课程名称</th>
                                    <th>开课学院</th>
                                    <th>理论学时</th>
                                    <th>实践学时</th>          
                                    <th>学分</th>
                                    <th>状态</th>
                                </MatTableHeader>
                                <MatTableRow>
                                    <td style="width: 20%;">@context.CourseId</td>
                                    <td style="width: 30%;">@context.Name</td>
                                    <td style="width: 20%;">@context.Department</td>
                                    <td style="width: 10%;">@context.TheoryHours</td>
                                    <td style="width: 10%;">@context.PracticeHours</td>
                                    <td style="width: 10%;">@(context.TheoryHours + context.PracticeHours/2.0)</td>
                                    <td><MatButton Raised="true">未修</MatButton></td>
                                </MatTableRow>
                            </MatTable>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    </MatAccordion>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
            </div>
        </div>
         <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                    <MatAccordion Multi="true">
                        <MatExpansionPanel style="margin-top: 1%;">
                        <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>选修课程&emsp;&emsp;已修学分 / 要求学分：  @csTemplate.currentcredits[1] / @csTemplate.needcredits[1]</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatTable Items="@csTemplate.Courselists[1]" class="mat-elevation-z5">
                               <MatTableHeader>
                                    <th>课程代码</th>
                                    <th>课程名称</th>
                                    <th>开课学院</th>
                                    <th>理论学时</th>
                                    <th>实践学时</th>  
                                    <th>学分</th>
                                    <th>状态</th>
                                </MatTableHeader>
                                <MatTableRow>
                                    <td style="width: 20%;">@context.CourseId</td>
                                    <td style="width: 30%;">@context.Name</td>
                                    <td style="width: 20%;">@context.Department</td>
                                    <td style="width: 10%;">@context.TheoryHours</td>
                                    <td style="width: 10%;">@context.PracticeHours</td>
                                    <td style="width: 10%;">@(context.TheoryHours + context.PracticeHours/2.0)</td>
                                    <td><MatButton Raised="true">未修</MatButton></td>
                                </MatTableRow>
                            </MatTable>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    </MatAccordion>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
            </div>
        </div>
         <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                    <MatAccordion Multi="true">
                        <MatExpansionPanel style="margin-top: 1%;">
                        <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>公选课程&emsp;&emsp;已修学分 / 要求学分：  @csTemplate.currentcredits[2] / @csTemplate.needcredits[2]</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatTable Items="@csTemplate.Courselists[2]" class="mat-elevation-z5">
                               <MatTableHeader>
                                    <th>课程代码</th>
                                    <th>课程名称</th>
                                    <th>开课学院</th>
                                    <th>理论学时</th>
                                    <th>实践学时</th>  
                                    <th>学分</th>
                                    <th>状态</th>
                                </MatTableHeader>
                                <MatTableRow>
                                    <td style="width: 20%;">@context.CourseId</td>
                                    <td style="width: 30%;">@context.Name</td>
                                    <td style="width: 20%;">@context.Department</td>
                                    <td style="width: 10%;">@context.TheoryHours</td>
                                    <td style="width: 10%;">@context.PracticeHours</td>
                                    <td style="width: 10%;">@(context.TheoryHours + context.PracticeHours/2.0)</td>
                                    <td><MatButton Raised="true">未修</MatButton></td>
                                </MatTableRow>
                            </MatTable>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    </MatAccordion>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
            </div>
        </div>
    </MatTab>
    <MatTab Label="查看课表">
        Second Content
    </MatTab>
    <MatTab Label="补选课程">
        <ClassApply/>
    </MatTab>

</MatTabGroup>

 
@code
{
    [Inject] IJSRuntime JS { get; set; }
    List<Class> classes;
    List<Course> coursesList = new List<Course>();
    List<List<shownclass>> courses = new List<List<shownclass>>();
    List<Class> details;
    SearchModel myModel = new SearchModel();
    Template csTemplate = new Template();
    User user;

    protected override async Task OnInitializedAsync()
    {
        TSSDbContext.MyGlobals.PresentConnection++;
        Console.WriteLine("OnInitialized " + TSSDbContext.MyGlobals.PresentConnection);
        if(TSSDbContext.MyGlobals.PresentConnection > TSSDbContext.MyGlobals.MaxConnection){
            await JS.InvokeAsync<object>("alert", "选课子系统连接人数已满！");
            NavigationManager.NavigateTo("/");
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await _userManager.GetUserAsync(authState.User);
        var sc = await DbContext.SpecialityCourse.Include(i => i.Course).ToListAsync();
        foreach(SpecialityCourse c in sc)
        {
            Course s = c.Course;
            coursesList.Add(s);
        }
        @* coursesList = await DbContext.Courses.ToListAsync(); *@
        csTemplate.setCourse(coursesList,coursesList,coursesList);
        await UpdateList();
    }

    async Task UpdateList()
    {
        courses.Clear();
        var selectclasses = from m in DbContext.Classes.Include("Classroom").Include("Course").Include("Teacher").Include("Students")
                select m;
        if (!string.IsNullOrEmpty(myModel.CourseName))
        {
            selectclasses = selectclasses.Where(s => s.Course.Name.Contains(myModel.CourseName));
        }
        if (!string.IsNullOrEmpty(myModel.CourseID))
        {
            selectclasses = selectclasses.Where(s => s.Course.CourseId.Contains(myModel.CourseID));
        }
        if (!string.IsNullOrEmpty(myModel.TeacherName))
        {
            selectclasses = selectclasses.Where(s => s.Teacher.Name.Contains(myModel.TeacherName));
        } 
        classes = selectclasses.ToList();
        IEnumerable<IGrouping<string, Class>> query = classes.GroupBy(x => x.Course.CourseId);
        foreach (IGrouping<string, Class> info in query)
        {
            details = info.ToList<Class>();
            List<shownclass> showclasslist = new List<shownclass>();
            foreach(Class c in details)
            {
                if(c.Students!=null&&c.Students.Contains(user))
                    showclasslist.Add(new shownclass(c,"退课"));
                else
                    showclasslist.Add(new shownclass(c,"选课"));
            }
            courses.Add(showclasslist); 
        }
    }
    
    async Task search()
    {
        courses.Clear();
        var selectclasses = from m in DbContext.Classes.Include("Classroom").Include("Course").Include("Teacher").Include("Students")
                select m;
        if (!string.IsNullOrEmpty(myModel.CourseName))
        {
            selectclasses = selectclasses.Where(s => s.Course.Name.Contains(myModel.CourseName));
        }
        if (!string.IsNullOrEmpty(myModel.CourseID))
        {
            selectclasses = selectclasses.Where(s => s.Course.CourseId.Contains(myModel.CourseID));
        }
        if (!string.IsNullOrEmpty(myModel.TeacherName))
        {
            selectclasses = selectclasses.Where(s => s.Teacher.Name.Contains(myModel.TeacherName));
        }
        classes = selectclasses.ToList(); 
        IEnumerable<IGrouping<string, Class>> query = classes.GroupBy(x => x.Course.CourseId);
        foreach (IGrouping<string, Class> info in query)
        {
            details = info.ToList<Class>();
            List<shownclass> showclasslist = new List<shownclass>();
            foreach(Class c in details)
            {
                if(c.Students!=null&&c.Students.Contains(user))
                    showclasslist.Add(new shownclass(c,"退课"));
                else
                    showclasslist.Add(new shownclass(c,"选课"));
            }
            courses.Add(showclasslist); 
        }
    }

    String indexToTimeStr(int index) {
        String timeStr = "";
        int day = index % 7;
        int tid = index / 7;
        
        switch(day) {
            case 0: timeStr += "周一 ";break;
            case 1: timeStr += "周二 ";break;
            case 2: timeStr += "周三 ";break;
            case 3: timeStr += "周四 ";break;
            case 4: timeStr += "周五 ";break;
            case 5: timeStr += "周六 ";break;
            case 6: timeStr += "周日 ";break;
        }
        switch(tid) {
            case 0: timeStr += "08:00-08:45"; break;
            case 1: timeStr += "08:50-09:35"; break;
            case 2: timeStr += "09:50-10:35"; break;
            case 3: timeStr += "10:40-11:25"; break;
            case 4: timeStr += "11:30-12:15"; break;
            case 5: timeStr += "13:15-14:00"; break;
            case 6: timeStr += "14:05-14:50"; break;
            case 7: timeStr += "14:55-15:40"; break;
            case 8: timeStr += "15:55-16:40"; break;
            case 9: timeStr += "16:45-17:30"; break;
            case 10: timeStr += "18:30-19:15"; break;
            case 11: timeStr += "19:20-20:05"; break;
            case 12: timeStr += "20:10-20:55"; break;
        }
        return timeStr;
    }


    public class shownclass
    {
        public Class showclass { get; set; }
        public string state { get; set; }
        public shownclass(Class c, string s)
        {
            this.showclass=c;
            this.state=s;
        }
    }
    public class SearchModel
    {
        public string CourseName { get; set; }
        public string CourseID { get; set; }
        public string TeacherName { get; set; }
    }
    public class Template
    {
        public List<int> needcredits = new List<int>();
        public List<int> currentcredits= new List<int>();
        public List<List<Course>> Courselists = new List<List<Course>>();
        
        public void setCourse(List<Course> c0, List<Course> c1, List<Course> c2)
        {
            needcredits.Clear();currentcredits.Clear();Courselists.Clear();
            needcredits.Add(100);needcredits.Add(30);needcredits.Add(10);
            currentcredits.Add(0);currentcredits.Add(0);currentcredits.Add(0);
            this.Courselists.Add(c0);
            this.Courselists.Add(c1);
            this.Courselists.Add(c2);
        }
    }

    protected override bool ShouldRender()
    {
        var renderUI = true;
        if(TSSDbContext.MyGlobals.PresentConnection>=TSSDbContext.MyGlobals.MaxConnection){
            renderUI = false;
        }
        return renderUI;
    }

    public void Dispose()
    {
        TSSDbContext.MyGlobals.PresentConnection--;
        Console.WriteLine("Dispose");
    }
}