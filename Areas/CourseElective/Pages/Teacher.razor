@page "/CourseElective/Teachercopy"
@using Microsoft.AspNetCore.Mvc;
@attribute [Authorize(Roles = "Teacher")]

@*创建标题页 搜索*@
<MatTabGroup>

    <MatTab Label="课程名单">
        <EditForm Model="myDownloadModel" OnValidSubmit="search"> @*在这里绑定按钮触发的函数*@
            <DataAnnotationsValidator/>
                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myDownloadModel.CourseName" Label="CourseName"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myDownloadModel.CourseID" Label="CourseID"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myDownloadModel.ClassID" Label="ClassID"></MatTextField>
                        </div>
                        @*文本框 bindvalue通过按钮触发*@
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            <MatButton Type="submit" Raised="true">search</MatButton> @*搜索按钮*@
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                    </div>
                </div>
        </EditForm>

        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                    <MatAccordion Multi="true">
                        @if(classes != null){
                            foreach(var cla in classes){
                                <MatExpansionPanel style="margin-top: 1%;">
                                <MatExpansionPanelSummary>
                                <MatExpansionPanelHeader>@cla.Course.Name @cla.ClassId</MatExpansionPanelHeader>
                                </MatExpansionPanelSummary>
                                <MatExpansionPanelDetails>
                                    <MatTable Items="@cars" class="mat-elevation-z5" ShowPaging="false">
                                        <MatTableHeader>
                                            <th>教师</th>
                                            <th>上课时间</th>
                                            <th>上课地点</th>
                                            <th>余量/容量</th>
                                            <th>待定人数</th>
                                            <th>操作</th>
                                        </MatTableHeader>
                                        <MatTableRow>
                                            <td style="width: 20%;">@context.Name</td>
                                            <td style="width: 25%;">@String.Format("${0:f2}", @context.Price)</td>
                                            <td style="width: 25%;">@context.Horsepower</td>
                                            <td style="width: 15%;">4/40</td>
                                            <td style="width: 15%;">5</td>
                                            <td><MatButton Raised="true">选课</MatButton></td>
                                        </MatTableRow>
                                    </MatTable>
                                </MatExpansionPanelDetails>
                            </MatExpansionPanel>
                            }
                        }else {

                        }
                    </MatAccordion>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
            </div>
        </div>
        
    </MatTab>

    <MatTab Label="补选审核">
       <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                    <MatPaginator Length="@size" PageSize="@pageSize" Page="OnPage"></MatPaginator>

                </div>
            </div>
        </div>
        <table class="table">
       
        <thead>
            <tr>
                <th scope="col">补选学生</th>
                <th scope="col">补选课程</th>
                <th scope="col">补选班级</th>
                <th scope="col">理由</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @if(courses != null){
                  foreach(var course in courses){
                    <tr>
                        <td>@course.CourseId</td>
                        <td>@course.Name</td>
                        <td>@course.Department</td>
                        <td><button type="button" class="btn btn-link" @onclick="@(_ => {recordToDelete=course;reasonIsOpen=true;})">查看理由</button></td>
                        <td><button type="button" class="btn btn-link" @onclick="@(_ => {recordToDelete=course;dialogAllowIsOpen=true;})">通过</button>
                        |<button type="button" class="btn btn-link" @onclick="@(_ => {recordToDelete=course;dialogRefuseIsOpen=true;})">拒绝</button></td>
                    </tr>
                  
                }
            }else {
                <div class="spinner-border" role="status">
                    <span class="sr-only">加载中……</span>
                </div>
            }
            
        </tbody>
    </table>
    <MatDialog @bind-IsOpen="@dialogAllowIsOpen">
        <MatDialogTitle>通过补选</MatDialogTitle>
        <MatDialogContent>
            <p>真的要通过 @recordToDelete?.Name 的补选申请申请吗？</p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogAllowIsOpen = false; })">否</MatButton>
            <MatButton OnClick="@AddToClass">是</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@dialogRefuseIsOpen">
        <MatDialogTitle>不通过补选</MatDialogTitle>
        <MatDialogContent>
            <p>确定不通过 @recordToDelete?.Name 的补选吗？</p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogRefuseIsOpen = false; })">否</MatButton>
            <MatButton OnClick="@DeleteRecord">是</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@reasonIsOpen">
        <MatDialogTitle>补选理由</MatDialogTitle>
        <MatDialogContent>
            <p>@recordToDelete?.Name  这是一段非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长非常长的测试</p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { reasonIsOpen = false; })">关闭</MatButton>
        </MatDialogActions>
    </MatDialog>
        
    </MatTab>

</MatTabGroup>

@*part1 download studentlist*@
@code
{
    [Inject] IJSRuntime JS { get; set; }
    IEnumerable<Class> classes;
    DownloadModel myDownloadModel = new DownloadModel();
    public class Car
    {
        public string Name { get; set; }
        public double Price { get; set; }
        public int Horsepower { get; set; }

        public Car(string name, double price, int horsepower)
        {
            Name = name;
            Price = price;
            Horsepower = horsepower;
        }
    }

    Car[] cars = new[]
    {
        new Car("Volkswagen Golf", 10000, 220),
        new Car("Volkswagen Passat", 11000, 240),
        new Car("Volkswagen Polo", 12000, 110),
        new Car("Ford Focus", 13000, 200),
        new Car("Ford Fiesta", 14000, 160),
        new Car("Ford Fusion", 15000, 260),
        new Car("Ford Mondeo", 16000, 120),
    };

    protected override async Task OnInitializedAsync()
    {
        @*分页面1初始化*@
        await search();

        @*分页面2初始化*@
        size = await DbContext.Courses.CountAsync();
        await UpdateList1();
    }
    async Task search()
    {
        var selectclasses = from m in DbContext.Classes
                    select m;
        if (!string.IsNullOrEmpty(myDownloadModel.CourseName))
        {
            selectclasses = selectclasses.Where(s => s.Course.Name.Contains(myDownloadModel.CourseName));
        }
        if (!string.IsNullOrEmpty(myDownloadModel.CourseID))
        {
            selectclasses = selectclasses.Where(s => s.Course.CourseId.Contains(myDownloadModel.CourseID));
        }
        if (!string.IsNullOrEmpty(myDownloadModel.ClassID))
        {
            selectclasses = selectclasses.Where(s => s.ClassId.Contains(myDownloadModel.ClassID));
        }

        @*selectcourses = selectcourses.Where(s => s.Teacher.name.Contains());*@ @*需要知道用户登录状态信息*@
        
        classes = await selectclasses.ToListAsync();
    }

    public class DownloadModel
    {
        public string CourseName { get; set; }
        
        public string ClassID {get; set; }
        public string CourseID { get; set; }
        public User Teacher { get; set; }
        public List<User> Students { get; set; }
    }
}

@*part2 补选申请审核*@
@code
{
    int page = 0;
    int pageSize = 25;
    int size = 0;
    bool dialogAllowIsOpen = false;@*允许选课二次确认窗口指示标识*@
    bool dialogRefuseIsOpen = false;@*拒绝选课二次确认窗口指示标识*@
    bool reasonIsOpen = false;@*显示理由窗口指示标识*@
    IEnumerable<Course> courses;
    Course recordToDelete = null;
    async Task OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        page = e.PageIndex;
        await UpdateList1();
        StateHasChanged();
    }
    async Task DeleteRecord() {
        
        DbContext.Courses.Remove(recordToDelete);
        await DbContext.SaveChangesAsync();
        await UpdateList1();
        dialogAllowIsOpen = false;
        dialogRefuseIsOpen = false;
    }
    async Task AddToClass() {
        @*
        条件： record 解析获得 src：学生  src：class 
        目标： 向classes中的class中的studentlist添加学生
        目标： 向学生表中学生list class 添加 classid
        *@

        await DeleteRecord();
        DbContext.Courses.Remove(recordToDelete);
        await DbContext.SaveChangesAsync();
        
    }
    async Task UpdateList1()
    {
        courses = await DbContext.Courses.Skip(page * pageSize).Take(pageSize).ToListAsync();
       
    }
}
