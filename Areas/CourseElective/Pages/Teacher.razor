@page "/CourseElective/Teacher"
@using Microsoft.AspNetCore.Mvc;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager
@attribute [Authorize(Roles = "Teacher")]

@*创建标题页 搜索*@

<MatTabGroup>
    <MatTab Label="课程名单">
        
        <EditForm Model="myDownloadModel" OnValidSubmit="search"> 
            <DataAnnotationsValidator/>
                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myDownloadModel.CourseName" Label="CourseName"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myDownloadModel.CourseID" Label="CourseID"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatTextField @bind-Value="myDownloadModel.ClassID" Label="ClassID"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            <MatButton Type="submit" Raised="true">search</MatButton>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                    </div>
                </div>
        </EditForm>

        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                    <MatAccordion Multi="true">
                        @if(cwu != null){
                            foreach(var cla in cwu){
                                <MatExpansionPanel style="margin-top: 1%;">
                                <MatExpansionPanelSummary>
                                <MatExpansionPanelHeader>@cla.Class.ClassId @cla.Class.Course.Name</MatExpansionPanelHeader>
                                </MatExpansionPanelSummary>
                                <MatExpansionPanelDetails>
                                   <table class="table">
                                        <thead>
                                            <tr>
                                            <th scope="col">学生名</th>
                                            <th scope="col">性别</th>
                                            <th scope="col">专业</th>
                                            <th scope="col">学生Id</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @if(cla.Users != null){
                                                    foreach(var user in cla.Users){
                                                        <tr>
                                                            <td>@user.Name</td>
                                                            <td>@user.Sex</td>
                                                            <td>@user.Belong</td>
                                                            <td>@user.Id</td>
                                                        </tr>
                                                    }
                                                }else {
                                                   <td>目前班级内暂无学生</td>
                                                }
                                            </tbody>
                                        </table>
                                </MatExpansionPanelDetails>
                            </MatExpansionPanel>
                            }
                        }else {

                        }
                    </MatAccordion>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
            </div>
        </div>
    </MatTab>

    <MatTab Label="补选审核">
       <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                    <MatPaginator Length="@size" PageSize="@pageSize" Page="OnPage"></MatPaginator>

                </div>
            </div>
        </div>
        <table class="table">
       
        <thead>
            <tr>
                <th scope="col">补选学生</th>
                <th scope="col">补选课程</th>
                <th scope="col">补选班级</th>
                <th scope="col">理由</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @if(Applies != null){
                  foreach(var apply in Applies){
                    <tr>
                        <td>@apply?.Student.UserName</td>
                        <td>@apply?.Class.Course.Name</td>
                        <td>@apply?.Class.ClassId</td>
                        <td><button type="button" class="btn btn-link" @onclick="@(_ => {recordToDelete=apply;reasonIsOpen=true;})">查看理由</button></td>
                        <td><button type="button" class="btn btn-link" @onclick="@(_ => {recordToDelete=apply;dialogAllowIsOpen=true;})">通过</button>
                        |<button type="button" class="btn btn-link" @onclick="@(_ => {recordToDelete=apply;dialogRefuseIsOpen=true;})">拒绝</button></td>
                    </tr>
                  
                }
            }else {
                <div class="spinner-border" role="status">
                    <span class="sr-only">加载中……</span>
                </div>
            }
            
        </tbody>
    </table>
    <MatDialog @bind-IsOpen="@dialogAllowIsOpen">
        <MatDialogTitle>通过补选</MatDialogTitle>
        <MatDialogContent>
            <p>真的要通过 @recordToDelete?.Student.UserName 的补选申请申请吗？</p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogAllowIsOpen = false; })">否</MatButton>
            <MatButton OnClick="@AddToClass">是</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@dialogRefuseIsOpen">
        <MatDialogTitle>不通过补选</MatDialogTitle>
        <MatDialogContent>
            <p>确定不通过 @recordToDelete?.Student.UserName 的补选吗？</p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogRefuseIsOpen = false; })">否</MatButton>
            <MatButton OnClick="@DeleteRecord">是</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@reasonIsOpen">
        <MatDialogTitle>补选理由</MatDialogTitle>
        <MatDialogContent>
            <p>@recordToDelete?.Reason </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { reasonIsOpen = false; })">关闭</MatButton>
        </MatDialogActions>
    </MatDialog>
        
    </MatTab>

</MatTabGroup>

@*part1 download studentlist*@
@code
{
    [Inject] IJSRuntime JS { get; set; }
    IEnumerable<Class> classes;
    List<classWithUser> cwu = new List<classWithUser>();
    DownloadModel myDownloadModel = new DownloadModel();
    User user;

    protected override async Task OnInitializedAsync()
    {
        TSSDbContext.MyGlobals.PresentConnection++;
        Console.WriteLine("OnInitialized " + TSSDbContext.MyGlobals.PresentConnection);
        if(TSSDbContext.MyGlobals.PresentConnection > TSSDbContext.MyGlobals.MaxConnection){
            await JS.InvokeAsync<object>("alert", "选课子系统连接人数已满！");
            NavigationManager.NavigateTo("/");
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await _userManager.GetUserAsync(authState.User);
        @*分页面1初始化*@
        await search();

        @*分页面2初始化*@
        size = await DbContext.Applies.CountAsync();
        await UpdateList1();
    }

    async Task search()
    {
        var selectclasses = from m in DbContext.Classes.Include("Course").Where(s=>s.Teacher == user)
                    select m;
        if (!string.IsNullOrEmpty(myDownloadModel.CourseName))
        {
            selectclasses = selectclasses.Where(s => s.Course.Name.Contains(myDownloadModel.CourseName));
        }
        if (!string.IsNullOrEmpty(myDownloadModel.CourseID))
        {
            selectclasses = selectclasses.Where(s => s.Course.CourseId.Contains(myDownloadModel.CourseID));
        }
        if (!string.IsNullOrEmpty(myDownloadModel.ClassID))
        {
            selectclasses = selectclasses.Where(s => s.ClassId.Contains(myDownloadModel.ClassID));
        }

        @*selectcourses = selectcourses.Where(s => s.Teacher.name.Contains());*@ @*需要知道用户登录状态信息*@
        
        classes = await selectclasses.ToListAsync();
        foreach(var cla in classes)
        {
            List<User> tmp = new List<User>();
            foreach(var stuid in cla.Students)
            {
                User u =_userManager.Users.Where(s=>s.Id == stuid).FirstOrDefault();
                tmp.Add(u);
            }
            classWithUser tmp1 = new classWithUser();
            tmp1.Users = tmp;
            tmp1.Class = cla;
            cwu.Add(tmp1);
        }
    }
    public class classWithUser
    {
        public Class Class {get; set;}
        public List<User> Users {get;set;}
    }

    public class DownloadModel
    {
        public string CourseName { get; set; }
        
        public string ClassID {get; set; }
        public string CourseID { get; set; }
        public User Teacher { get; set; }
        public List<User> Students { get; set; }
    }
}

@*part2 补选申请审核*@
@code
{

    int page = 0;
    int pageSize = 25;
    int size = 0;
    bool dialogAllowIsOpen = false;@*允许选课二次确认窗口指示标识*@
    bool dialogRefuseIsOpen = false;@*拒绝选课二次确认窗口指示标识*@
    bool reasonIsOpen = false;@*显示理由窗口指示标识*@
    
    IEnumerable<Apply> Applies;

    Apply recordToDelete;

    async Task OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        page = e.PageIndex;
        await UpdateList1();
        StateHasChanged();
    }
    async Task DeleteRecord() {
        
        DbContext.Applies.Remove(recordToDelete);
        await DbContext.SaveChangesAsync();
        await UpdateList1();
        dialogAllowIsOpen = false;
        dialogRefuseIsOpen = false;
    }
    async Task AddToClass() {
        @*
        条件： record 解析获得 src：学生  src：class 
        目标： 向classes中的class中的studentlist添加学生
        目标： 向学生表中学生list class 添加 classid
        *@
        User stu = recordToDelete.Student;
        string claId = recordToDelete.Class.ClassId;
        Class cla = recordToDelete.Class;

        Class ptrc = DbContext.Classes.Where(s=>s.ClassId==claId).FirstOrDefault();
        UserClasses ptruc = DbContext.UserClasses.Include("User").Where(u=>u.User == stu).FirstOrDefault();
        if(ptruc==null)
        {
            UserClasses uc = new UserClasses();
            uc.User = stu;
            uc.ClassesId = new List<string>();
            uc.ClassesId.Add(claId);
            DbContext.UserClasses.Add(uc);
            DbContext.SaveChanges();
        }else
        {
            ptruc.ClassesId.Add(claId);
            DbContext.SaveChanges();
        }
        ptrc.Students.Add(stu.Id);
        DbContext.SaveChanges();

        await DeleteRecord();
    }
    async Task UpdateList1()
    {
        var all = DbContext.Applies.Include("Class").Include("Student").Where(s => s.Class.Teacher == user);
        Applies = await all.Skip(page * pageSize).Take(pageSize).ToListAsync();
    }
}
