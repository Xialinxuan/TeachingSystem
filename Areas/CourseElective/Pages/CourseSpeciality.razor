@page "/CourseElective/SpecialityCourse"
@using Microsoft.AspNetCore.Mvc;
@using System.Security.Claims
@attribute [Authorize(Roles = "Student")]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager


<h1>Details</h1>

 <table class="table">
       
        <thead>
            <tr>
                <th scope="col">课程号</th>
                <th scope="col">课程名称</th>
                <th scope="col">用户ID</th>
                <th scope="col">用户名</th>
                
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @if(specialityCourse != null){
                  foreach(var SC in specialityCourse){
                    <tr>
                        <td>@SC.CourseId</td>
                        <td>@SC.Course.Name</td>
                        <td>@SC.UserID</td>
                        <td>@SC.UserName</td>
                        @* <td><a href="/BasicInfo/Manage/Account/Edit/@select.Id">编辑</a>|<button type="button" class="btn btn-link" @onclick="@(_ => {selectionToDelete=user;dialogIsOpen=true;})">删除</button></td> *@
                    </tr>
                  
                }
            }else {
                <div class="spinner-border" role="status">
                    <span class="sr-only">加载中……</span>
                </div>
            }
            
        </tbody>
    </table>

@code {
    int page = 0;
    int pageSize = 25;
    int size = 0;
    bool dialogIsOpen = false;
    SpecialityCourse _SpecialityCourseToDelete = null;
    User user;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await _userManager.GetUserAsync(authState.User);
        Console.WriteLine("Get User id:" + user.Id + " user name:" + user.UserName);
 
        await UpdateList();
        await UpdateList();
    }

    async Task OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        page = e.PageIndex;
        await UpdateList();
        StateHasChanged();
    }
    @* async Task DeleteSelection() {
        await specialityCourse.DeleteAsync(selectionToDelete);
        await UpdateList();
        dialogIsOpen = false;
    } *@

    IEnumerable<SpecialityCourse> specialityCourse;
    async Task UpdateList()
    {
        specialityCourse = await DbContext.SpecialityCourse.Include(i => i.Course).ToListAsync();
    }
}





